import LocationListItem from '@/components/LocationListItem';
import { LatLang, LocationData } from '@/types/Location';
import { Form, Input, Button, List, Empty, Typography, Tag, Space, message, Spin } from 'antd'
import Head from 'next/head'
import { useState } from 'react';

const formItemLayout = {
  labelCol: { span: 6 },
  wrapperCol: { span: 12 },
};

const formTailLayout = {
  labelCol: { span: 6 },
  wrapperCol: { span: 12, offset: 6 },
};

const PRAGUE: LatLang = { latitude: 50.0833, longitude: 14.4667 };
const LONDON: LatLang = { latitude: 51.507359, longitude: -0.136439 };
const RIO_DE_JANEIRO: LatLang = { latitude: -22.908333, longitude: -43.196388 };
const MIAMI: LatLang = { latitude: 25.761681, longitude: -80.191788 };
const BANGKOK: LatLang = { latitude: 13.668217, longitude: 100.614021 };
const MADRID: LatLang = { latitude: 40.416775, longitude: -3.703790 };

const BASE_API_URL = 'https://api.open-meteo.com/v1/forecast?current_weather=true';

type WeatherResponse = {
  latitude: number;
  longitude: number;
  generationtime_ms: number;
  utc_offset_seconds: number;
  timezone: string;
  timezone_abbreviation: string;
  elevation: number;
  current_weather: {
    temperature: number;
    windspeed: number;
    winddirection: number;
    weathercode: number;
    time: string;
  }
}


export default function Home() {

  const [form] = Form.useForm<LatLang>();
  const [searchedLocations, setSearchedLocations] = useState<LocationData[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = () => {
    form.validateFields().then((validatedFormData) => {
      setIsLoading(true);

      const apiUrl = new URL(BASE_API_URL);
      apiUrl.searchParams.append('latitude', validatedFormData.latitude.toString());
      apiUrl.searchParams.append('longitude', validatedFormData.longitude.toString());

      fetch(apiUrl)
        .then((response) => {
          return response.json();
        })
        .then((weatherData: WeatherResponse) => {
          setSearchedLocations((prev) => [
            ...prev, {
              latitude: validatedFormData.latitude,
              longitude: validatedFormData.longitude,
              temperature: weatherData.current_weather.temperature,
              key: weatherData.generationtime_ms.toString()
            }
          ]);

          form.resetFields();
        })
        .catch(() => {
          message.error('There was an error while getting the temperature');
        })
        .finally(() => {
          setIsLoading(false);
        })
    })
  }

  const handleTagClick = (location: LatLang) => {
    form.setFieldsValue({ ...location });
  }

  const handleRemove = (keyToRemove: string) => {
    setSearchedLocations((prev) => prev.filter((item) => item.key !== keyToRemove));
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column' }}>
        <Space
          size={[0, 8]}
          style={{ width: 600, alignSelf: 'center' }}
        >
          <div style={{ marginRight: '.5rem' }}>Favourite locations:</div>
          <Tag.CheckableTag key="Prague" checked={false} onClick={() => handleTagClick(PRAGUE)}>Prague</Tag.CheckableTag>
          <Tag.CheckableTag key="London" checked={false} onClick={() => handleTagClick(LONDON)}>London</Tag.CheckableTag>
          <Tag.CheckableTag key="Rio de Janeiro" checked={false} onClick={() => handleTagClick(RIO_DE_JANEIRO)}>Rio de Janeiro</Tag.CheckableTag>
          <Tag.CheckableTag key="Miami" checked={false} onClick={() => handleTagClick(MIAMI)}>Miami</Tag.CheckableTag>
          <Tag.CheckableTag key="Bangkok" checked={false} onClick={() => handleTagClick(BANGKOK)}>Bangkok</Tag.CheckableTag>
          <Tag.CheckableTag key="Madrid" checked={false} onClick={() => handleTagClick(MADRID)}>Madrid</Tag.CheckableTag>
        </Space>
        <Form
          form={form}
          style={{ width: 600, alignSelf: 'center', marginTop: '1rem' }}
        >
          <Form.Item
            name='latitude'
            label='Latitude'
            {...formItemLayout}
            rules={[
              { required: true, message: 'Latitude is required' },
              () => ({
                validator(_, value) {
                  if (value > 90) {
                    return Promise.reject('Latitude must be smaller than 90째')
                  }
                  if (value < -90) {
                    return Promise.reject('Latitude must be greater than -90째')
                  }
                  return Promise.resolve()
                }
              })
            ]}
          >
            <Input type='number' disabled={isLoading} />
          </Form.Item>
          <Form.Item
            name='longitude'
            label='Longitude'
            {...formItemLayout}
            rules={[
              { required: true, message: 'Longitude is required' },
              () => ({
                validator(_, value) {
                  if (value > 180) {
                    return Promise.reject('Longitude must be smaller than 180째')
                  }
                  if (value < -180) {
                    return Promise.reject('Longitude must be greater than -180째')
                  }
                  return Promise.resolve()
                }
              })
            ]}
          >
            <Input type='number' disabled={isLoading} />
          </Form.Item>
          <Form.Item
            label=''
            {...formTailLayout}
          >
            <Button onClick={handleSubmit} loading={isLoading}>Search</Button>
          </Form.Item>
        </Form>

        <List
          bordered
          dataSource={searchedLocations}
          style={{ width: 600, alignSelf: 'center', marginTop: '1rem', maxHeight: 600, overflow: 'auto' }}
          locale={{
            emptyText: <Empty description={<Typography.Text type='secondary'>No location searched yet</Typography.Text>} />
          }}
          renderItem={(item) => (
            <LocationListItem location={item} onClick={() => handleRemove(item.key)} />
          )}
        />
      </main >
    </>
  )
}
